import React, { useState } from 'react';
import axios from 'axios';

function ContactCircle() {
  const [isOpen, setIsOpen] = useState(false); // –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [name, setName] = useState(''); // –ü–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏
  const [phone, setPhone] = useState('+380'); // –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [error, setError] = useState(''); // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const handleSubmit = async () => {
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∏–º—è');
      return;
    }
    if (!/^\+380\d{9}$/.test(phone)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã (+380)');
      return;
    }

    setError('');

    // Telegram API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const TELEGRAM_API = `https://api.telegram.org/bot7600008292:AAHe0_2Wo4spk9w2ybbSnYFmNfGOT8b-dts/sendMessage`;
    const chat_id = '-4573009838';
    const message = `–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;

    try {
      await axios.post(TELEGRAM_API, {
        chat_id,
        text: message,
      });
      alert('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      setName(''); // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setPhone('+380'); // –°–±—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç
      setIsOpen(false); // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  };

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
  const handlePhoneChange = (e) => {
    const value = e.target.value;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +380
    if (/^\+380\d{0,9}$/.test(value)) {
      setPhone(value);
    }
  };

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏ (–∑–∞–ø—Ä–µ—â–∞–µ–º —Ü–∏—Ñ—Ä—ã)
  const handleNameChange = (e) => {
    const value = e.target.value;
    // –ó–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ —Ü–∏—Ñ—Ä
    if (/^[a-zA-Z–∞-—è–ê-–Ø\s]*$/.test(value)) {
      setName(value);
    }
  };

  return (
    <div className="contact-circle">
      {/* –ö—Ä—É–∂–æ–∫ —Å —Ç—Ä—É–±–∫–æ–π */}
      <div
        className="circle"
        onClick={() => setIsOpen((prev) => !prev)}
        title="–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
      >
        üìû
      </div>
      {isOpen && (
        <div className="contact-form">
          <input
            type="text"
            placeholder="–ò–º—è"
            value={name}
            onChange={handleNameChange} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏
          />
          <input
            type="text"
            placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            value={phone}
            onChange={handlePhoneChange} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
          />
          {error && <p className="error">{error}</p>} {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ */}
          <button onClick={handleSubmit}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
        </div>
      )}
    </div>
  );
}

export default ContactCircle;
